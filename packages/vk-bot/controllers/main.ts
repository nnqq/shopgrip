import Url from 'url';
import { isNull } from '../../lib/helpers/isNull';
import { parseLinkAttachment } from '../helpers/parseLinkAttachment';
import { parser } from '../../parser';
import { broker } from '../broker';

export const main = async (ctx): Promise<void> => {
  try {
    const message = ctx.message.text.trim().toLowerCase() || parseLinkAttachment(ctx.message);

    const url = Url.parse(message);

    if (isNull(url.host)) {
      return ctx.reply('–≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ :( –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –ª—é–±–æ–π —Ç–æ–≤–∞—Ä –≤ –ª—é–±–æ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ. –ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å —Å–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –¥–æ–±–∞–≤–ª—è—Ç—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´üè† –ú–µ–Ω—é¬ª');
    }


    const parserRes = await parser.add(broker, {
      userId: ctx.session.userId,
      origUrl: message,
    });

    return ctx.reply(JSON.stringify(parserRes));

    // return ctx.reply('‚úÖ –û–∫. –Ø –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É –∫–∞–∫ —Ü–µ–Ω–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä —É–º–µ–Ω—å—à–∏—Ç—Å—è');
  } catch (e) {
    console.error(e);
    return ctx.reply(e.message);
  }
};
