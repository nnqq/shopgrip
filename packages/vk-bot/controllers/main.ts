import Url from 'url';
import pino from 'pino';
import { isNull } from '../../lib/helpers/isNull';
import { parseLinkAttachment } from '../helpers/parseLinkAttachment';
import { parser } from '../../parser';
import { broker } from '../broker';

const logger = pino();

export const main = async (ctx): Promise<void> => {
  try {
    const message = ctx.message.text.trim().toLowerCase() || parseLinkAttachment(ctx.message);

    const url = Url.parse(message);

    if (isNull(url.host)) {
      return ctx.reply('–≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ üòî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –ª—é–±–æ–π —Ç–æ–≤–∞—Ä –≤ –ª—é–±–æ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ. –ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å —Å–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –¥–æ–±–∞–≤–ª—è—Ç—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´üè† –ú–µ–Ω—é¬ª');
    }


    const { title, vkUrl, price } = await parser.add(broker, {
      userId: ctx.session.userId,
      origUrl: message,
    });

    return ctx.reply({
      message: `‚úÖ –Ø –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–Ω–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã

üì¶ ¬´${title}¬ª
üí∏ ${price} —Ä—É–±
üåê ${vkUrl}`,
      dont_parse_links: true,
    });
  } catch (e) {
    logger.error(e);
    return ctx.reply('–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É üòî –í–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é, –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É ¬´üè† –ú–µ–Ω—é¬ª');
  }
};
